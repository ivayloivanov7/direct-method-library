name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOTNET_VERSION: '6.0.x'

jobs:
  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${{ steps.get_version.outputs.VERSION }}
        
        # Create release notes
        cat > release_notes.md << EOF
        # Release v${VERSION}
        
        ## Changes in this release
        
        This release includes updates to all platform packages:
        - **Python**: \`direct-method-mqtt-python v${VERSION}\`
        - **Node.js**: \`@direct-method/mqtt-client v${VERSION}\`
        - **.NET**: \`DirectMethod.Mqtt.Client v${VERSION}\`
        
        ## Installation
        
        ### Python
        \`\`\`bash
        pip install direct-method-mqtt-python==${VERSION}
        \`\`\`
        
        ### Node.js
        \`\`\`bash
        npm install @direct-method/mqtt-client@${VERSION}
        \`\`\`
        
        ### .NET
        \`\`\`bash
        dotnet add package DirectMethod.Mqtt.Client --version ${VERSION}
        \`\`\`
        
        ## Documentation
        
        See the [README](https://github.com/ivayloivanov7/direct-method-library) for usage examples and API documentation.
        EOF
        
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: false

  # Build and publish Python package
  publish-python:
    runs-on: ubuntu-latest
    needs: create-release
    defaults:
      run:
        working-directory: packages/sdk-python
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for setuptools_scm
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: packages/sdk-python/dist/*.whl
        asset_name: direct-method-mqtt-python.whl
        asset_content_type: application/zip

  # Build and publish Node.js package
  publish-nodejs:
    runs-on: ubuntu-latest
    needs: create-release
    defaults:
      run:
        working-directory: packages/sdk-node
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build package
      run: npm run build
    
    - name: Publish to npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish --access public
    
    - name: Create package tarball
      run: npm pack
    
    - name: Upload tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: packages/sdk-node/*.tgz
        asset_name: direct-method-mqtt-client.tgz
        asset_content_type: application/gzip

  # Build and publish .NET package
  publish-dotnet:
    runs-on: ubuntu-latest
    needs: create-release
    defaults:
      run:
        working-directory: packages/sdk-dotnet
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
    
    - name: Pack NuGet package
      run: dotnet pack --configuration Release --no-build --output ./nupkg
    
    - name: Publish to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: dotnet nuget push "nupkg/*.nupkg" --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json
    
    - name: Upload package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: packages/sdk-dotnet/nupkg/*.nupkg
        asset_name: DirectMethod.Mqtt.Client.nupkg
        asset_content_type: application/zip

  # Update documentation
  update-docs:
    runs-on: ubuntu-latest
    needs: [publish-python, publish-nodejs, publish-dotnet]
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update changelog
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        DATE=$(date +%Y-%m-%d)
        
        # Update global changelog
        if [ ! -f global-changelog/CHANGELOG.md ]; then
          echo "# Changelog" > global-changelog/CHANGELOG.md
          echo "" >> global-changelog/CHANGELOG.md
        fi
        
        # Add new version entry
        sed -i "3i\\
        ## [${VERSION}] - ${DATE}\\
        \\
        ### Added\\
        - Released version ${VERSION} of all platform packages\\
        - Python: direct-method-mqtt-python v${VERSION}\\
        - Node.js: @direct-method/mqtt-client v${VERSION}\\
        - .NET: DirectMethod.Mqtt.Client v${VERSION}\\
        \\
        ### Changed\\
        - Updated all packages to version ${VERSION}\\
        \\
        " global-changelog/CHANGELOG.md
    
    - name: Commit changelog
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add global-changelog/CHANGELOG.md
        git commit -m "Update changelog for v${{ steps.get_version.outputs.VERSION }}"
        git push